generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:sagarpass@localhost:5432/bikerent?schema=public"
}

model User {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String
  role       String[]   @default(["user"])
  phone      String?
  user_type  String[]   @default(["customer"])
  location   Location   @relation(fields: [locationId], references: [id])
  locationId Int
  status     String?    @default("active")
  vehicles   Vehicle[]
  bookings   Booking[]
  feedbacks  FeedBack[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Vehicle {
  id             Int        @id @default(autoincrement())
  name           String
  description    String
  rent_price     Int
  availability   Boolean    @default(true)
  images         String[]
  status         String?    @default("active")
  feedback       FeedBack[]
  feedback_count Int        @default(0)
  //owner of vehicle generally shop owner
  owner          User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        Int
  bookings       Booking[]
  location       Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId     Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Location {
  id        Int       @id @default(autoincrement())
  address   String
  latitude  Float
  longitude Float
  vehicles  Vehicle[]
  booking   Booking[]
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum PaymentStatus {
  PENDING
  REJECTED
  SUCCESS
}

model Booking {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [clientId], references: [id])
  clientId       Int
  vehicle        Vehicle        @relation(fields: [vehicleId], references: [id])
  vehicleId      Int
  status         String?        @default("active")
  booking_date   DateTime
  return_date    DateTime
  total_payment  Int
  image          String
  payment_status PaymentStatus? @default(PENDING)
  location       Location       @relation(fields: [locationId], references: [id])
  locationId     Int
  feedback       FeedBack[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model FeedBack {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  book      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId Int
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId Int
  rating    Int
  feedback  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
